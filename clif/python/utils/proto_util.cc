//////////////////////////////////////////////////////////////////////
// This file was automatically generated by CLIF to run under Python 2
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /workspace/clif_backend/llvm/llvm/tools/clif/python/utils/proto_util.clif

#include <Python.h>
#include "clif/python/ptr_util.h"
#include "clif/python/optional.h"
#include "/workspace/clif_backend/llvm/llvm/tools/clif/python/types.h"
#include "proto_util.h"
#include "clif/python/stltypes.h"
#include "clif/python/slots.h"

namespace clif_python_utils_proto__util_clifwrap {
using namespace clif;

#define _0 py::postconv::PASS
#define _1 UnicodeFromBytes


namespace pyProtoTypeInfo {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::clif_proto::ProtoTypeInfo> cpp;
};
static ::clif_proto::ProtoTypeInfo* ThisPtr(PyObject*);

static PyObject* get_name(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->name, {});
}

static int set_name(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the name attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->name)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for name:str", s? PyBytes_AS_STRING(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_fqname(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->fqname, {});
}

static int set_fqname(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the fqname attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->fqname)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for fqname:str", s? PyBytes_AS_STRING(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_package(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->package, {});
}

static int set_package(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the package attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->package)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for package:str", s? PyBytes_AS_STRING(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_srcfile(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->srcfile, {});
}

static int set_srcfile(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the srcfile attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->srcfile)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for srcfile:str", s? PyBytes_AS_STRING(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("name"), get_name, set_name, C("C++ ::std::string ProtoTypeInfo.name")},
  {C("fqname"), get_fqname, set_fqname, C("C++ ::std::string ProtoTypeInfo.fqname")},
  {C("package"), get_package, set_package, C("C++ ::std::string ProtoTypeInfo.package")},
  {C("srcfile"), get_srcfile, set_srcfile, C("C++ ::std::string ProtoTypeInfo.srcfile")},
  {}
};

// ProtoTypeInfo __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ProtoTypeInfo __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ProtoTypeInfo __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "clif.python.utils.proto_util.ProtoTypeInfo", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  0,                              // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HEAPTYPE | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::clif_proto::ProtoTypeInfo", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  nullptr,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "ProtoTypeInfo takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::clif_proto::ProtoTypeInfo>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::clif_proto::ProtoTypeInfo* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_clif_proto_ProtoTypeInfo"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::clif_proto::ProtoTypeInfo"));
      if (!PyErr_Occurred()) {
        ::clif_proto::ProtoTypeInfo* c = static_cast<::clif_proto::ProtoTypeInfo*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::clif_proto::ProtoTypeInfo*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyProtoTypeInfo

namespace pyMethodInfo {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::clif_proto::MethodInfo> cpp;
};
static ::clif_proto::MethodInfo* ThisPtr(PyObject*);

static PyObject* get_name(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->name, {});
}

static int set_name(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the name attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->name)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for name:str", s? PyBytes_AS_STRING(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_request(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->request), {});
}

static int set_request(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the request attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->request)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for request:ProtoTypeInfo", s? PyBytes_AS_STRING(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_reply(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(::clif::MakeStdShared(reinterpret_cast<wrapper*>(self)->cpp, &cpp->reply), {});
}

static int set_reply(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the reply attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->reply)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for reply:ProtoTypeInfo", s? PyBytes_AS_STRING(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyGetSetDef Properties[] = {
  {C("name"), get_name, set_name, C("C++ ::std::string MethodInfo.name")},
  {C("request"), get_request, set_request, C("C++ ::clif_proto::ProtoTypeInfo MethodInfo.request")},
  {C("reply"), get_reply, set_reply, C("C++ ::clif_proto::ProtoTypeInfo MethodInfo.reply")},
  {}
};

// MethodInfo __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// MethodInfo __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// MethodInfo __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "clif.python.utils.proto_util.MethodInfo", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  0,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HEAPTYPE | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::clif_proto::MethodInfo", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  nullptr,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "MethodInfo takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::clif_proto::MethodInfo>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::clif_proto::MethodInfo* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_clif_proto_MethodInfo"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::clif_proto::MethodInfo"));
      if (!PyErr_Occurred()) {
        ::clif_proto::MethodInfo* c = static_cast<::clif_proto::MethodInfo*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::clif_proto::MethodInfo*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyMethodInfo

namespace pyServiceInfo {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::clif_proto::ServiceInfo> cpp;
};
static ::clif_proto::ServiceInfo* ThisPtr(PyObject*);

static PyObject* get_name(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->name, {});
}

static int set_name(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the name attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->name)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for name:str", s? PyBytes_AS_STRING(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_fqname(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->fqname, {});
}

static int set_fqname(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the fqname attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->fqname)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for fqname:str", s? PyBytes_AS_STRING(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_srcfile(PyObject* self, void* xdata) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->srcfile, {});
}

static int set_srcfile(PyObject* self, PyObject* value, void* xdata) {
  if (value == nullptr) {
    PyErr_SetString(PyExc_TypeError, "Cannot delete the srcfile attribute");
    return -1;
  }
  auto cpp = ThisPtr(self); if (!cpp) return -1;
  if (Clif_PyObjAs(value, &cpp->srcfile)) return 0;
  PyObject* s = PyObject_Repr(value);
  PyErr_Format(PyExc_ValueError, "%s is not valid for srcfile:str", s? PyBytes_AS_STRING(s): "input");
  Py_XDECREF(s);
  return -1;
}

static PyObject* get_methods(PyObject* self) {
  auto cpp = ThisPtr(self); if (!cpp) return nullptr;
  return Clif_PyObjFrom(cpp->methods, {});
}

static PyGetSetDef Properties[] = {
  {C("name"), get_name, set_name, C("C++ ::std::string ServiceInfo.name")},
  {C("fqname"), get_fqname, set_fqname, C("C++ ::std::string ServiceInfo.fqname")},
  {C("srcfile"), get_srcfile, set_srcfile, C("C++ ::std::string ServiceInfo.srcfile")},
  {}
};

static PyMethodDef Methods[] = {
  {C("Methods"), (PyCFunction)get_methods, METH_NOARGS, C("Methods()->list<MethodInfo>  C++ ServiceInfo.methods getter")},
  {}
};

// ServiceInfo __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ServiceInfo __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ServiceInfo __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "clif.python.utils.proto_util.ServiceInfo", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  0,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  nullptr,                             // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HEAPTYPE | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::clif_proto::ServiceInfo", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  Properties,                          // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  if ((args && PyTuple_GET_SIZE(args) != 0) || (kw && PyDict_Size(kw) != 0)) {
    PyErr_SetString(PyExc_TypeError, "ServiceInfo takes no arguments");
    return -1;
  }
  reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::clif_proto::ServiceInfo>();
  return 0;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::clif_proto::ServiceInfo* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_clif_proto_ServiceInfo"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::clif_proto::ServiceInfo"));
      if (!PyErr_Occurred()) {
        ::clif_proto::ServiceInfo* c = static_cast<::clif_proto::ServiceInfo*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::clif_proto::ServiceInfo*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyServiceInfo

namespace pyProtoFileInfo {

struct wrapper {
  PyObject_HEAD
  ::clif::Instance<::clif_proto::ProtoFileInfo> cpp;
};
static ::clif_proto::ProtoFileInfo* ThisPtr(PyObject*);

// __init__(proto_file_path:str, additional_import_path:str)
static PyObject* wrapProtoFileInfo_as___init__(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* a[2];
  char* names[] = {
      C("proto_file_path"),
      C("additional_import_path"),
      nullptr
  };
  if (!PyArg_ParseTupleAndKeywords(args, kw, "OO:__init__", names, &a[0], &a[1])) return nullptr;
  ::std::string arg1;
  if (!Clif_PyObjAs(a[0], &arg1)) return ArgError("__init__", names[0], "::std::string", a[0]);
  ::std::string arg2;
  if (!Clif_PyObjAs(a[1], &arg2)) return ArgError("__init__", names[1], "::std::string", a[1]);
  // Call actual C++ method.
  Py_INCREF(args);
  Py_XINCREF(kw);
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    reinterpret_cast<wrapper*>(self)->cpp = ::clif::MakeShared<::clif_proto::ProtoFileInfo>(std::move(arg1), std::move(arg2));
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  Py_DECREF(args);
  Py_XDECREF(kw);
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  Py_RETURN_NONE;
}

// SrcFile() -> str
static PyObject* wrapSrcFile(PyObject* self) {
  // Call actual C++ method.
  ::clif_proto::ProtoFileInfo* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->SrcFile();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// PackageName() -> str
static PyObject* wrapPackageName(PyObject* self) {
  // Call actual C++ method.
  ::clif_proto::ProtoFileInfo* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->PackageName();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Messages() -> list<ProtoTypeInfo>
static PyObject* wrapMessages(PyObject* self) {
  // Call actual C++ method.
  ::clif_proto::ProtoFileInfo* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::clif_proto::ProtoTypeInfo> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Messages();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Enums() -> list<ProtoTypeInfo>
static PyObject* wrapEnums(PyObject* self) {
  // Call actual C++ method.
  ::clif_proto::ProtoFileInfo* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::clif_proto::ProtoTypeInfo> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Enums();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// Services() -> list<ServiceInfo>
static PyObject* wrapServices(PyObject* self) {
  // Call actual C++ method.
  ::clif_proto::ProtoFileInfo* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::vector< ::clif_proto::ServiceInfo> ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->Services();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// __nonzero__() -> bool
static PyObject* wrapIsValid_as___nonzero__(PyObject* self) {
  // Call actual C++ method.
  ::clif_proto::ProtoFileInfo* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  bool ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->IsValid();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

// ErrorMsg() -> str
static PyObject* wrapErrorMsg(PyObject* self) {
  // Call actual C++ method.
  ::clif_proto::ProtoFileInfo* c = ThisPtr(self);
  if (!c) return nullptr;
  PyThreadState* _save;
  Py_UNBLOCK_THREADS
  ::std::string ret0;
  PyObject* err_type = nullptr;
  string err_msg{"C++ exception"};
  try {
    ret0 = c->ErrorMsg();
  } catch(const std::exception& e) {
    err_type = PyExc_RuntimeError;
    err_msg += string(": ") + e.what();
  } catch (...) {
    err_type = PyExc_RuntimeError;
  }
  Py_BLOCK_THREADS
  if (err_type) {
    PyErr_SetString(err_type, err_msg.c_str());
    return nullptr;
  }
  return Clif_PyObjFrom(std::move(ret0), {});
}

PyNumberMethods AsNumber = {
  nullptr,                             // nb_add
  nullptr,                             // nb_subtract
  nullptr,                             // nb_multiply
  nullptr,                             // nb_divide
  nullptr,                             // nb_remainder
  nullptr,                             // nb_divmod
  nullptr,                             // nb_power
  nullptr,                             // nb_negative
  nullptr,                             // nb_positive
  nullptr,                             // nb_absolute
//   slot::adapter<int, slot::as_bool, wrapIsValid_as___nonzero__>, // nb_nonzero
  nullptr,                             // nb_invert
  nullptr,                             // nb_lshift
  nullptr,                             // nb_rshift
  nullptr,                             // nb_and
  nullptr,                             // nb_xor
  nullptr,                             // nb_or
  nullptr,                             // nb_coerce
  nullptr,                             // nb_int
  nullptr,                             // nb_long
  nullptr,                             // nb_float
  nullptr,                             // nb_oct
  nullptr,                             // nb_hex
  nullptr,                             // nb_inplace_add
  nullptr,                             // nb_inplace_subtract
  nullptr,                             // nb_inplace_multiply
  nullptr,                             // nb_inplace_divide
  nullptr,                             // nb_inplace_remainder
  nullptr,                             // nb_inplace_power
  nullptr,                             // nb_inplace_lshift
  nullptr,                             // nb_inplace_rshift
  nullptr,                             // nb_inplace_and
  nullptr,                             // nb_inplace_xor
  nullptr,                             // nb_inplace_or
  nullptr,                             // nb_floor_divide
  nullptr,                             // nb_true_divide
  nullptr,                             // nb_inplace_floor_divide
//   nullptr,                             // nb_inplace_true_divide
//   nullptr,                             // nb_index
};

static PyMethodDef Methods[] = {
  {C("__init__"), (PyCFunction)wrapProtoFileInfo_as___init__, METH_VARARGS | METH_KEYWORDS, C("__init__(proto_file_path:str, additional_import_path:str)\n  Calls C++ function\n  void ::clif_proto::ProtoFileInfo::ProtoFileInfo(::std::string, ::std::string)")},
  {C("SrcFile"), (PyCFunction)wrapSrcFile, METH_NOARGS, C("SrcFile() -> str\n  Calls C++ function\n  ::std::string ::clif_proto::ProtoFileInfo::SrcFile()")},
  {C("PackageName"), (PyCFunction)wrapPackageName, METH_NOARGS, C("PackageName() -> str\n  Calls C++ function\n  ::std::string ::clif_proto::ProtoFileInfo::PackageName()")},
  {C("Messages"), (PyCFunction)wrapMessages, METH_NOARGS, C("Messages() -> list<ProtoTypeInfo>\n  Calls C++ function\n  ::std::vector< ::clif_proto::ProtoTypeInfo> ::clif_proto::ProtoFileInfo::Messages()")},
  {C("Enums"), (PyCFunction)wrapEnums, METH_NOARGS, C("Enums() -> list<ProtoTypeInfo>\n  Calls C++ function\n  ::std::vector< ::clif_proto::ProtoTypeInfo> ::clif_proto::ProtoFileInfo::Enums()")},
  {C("Services"), (PyCFunction)wrapServices, METH_NOARGS, C("Services() -> list<ServiceInfo>\n  Calls C++ function\n  ::std::vector< ::clif_proto::ServiceInfo> ::clif_proto::ProtoFileInfo::Services()")},
  {C("ErrorMsg"), (PyCFunction)wrapErrorMsg, METH_NOARGS, C("ErrorMsg() -> str\n  Calls C++ function\n  ::std::string ::clif_proto::ProtoFileInfo::ErrorMsg()")},
  {}
};

// ProtoFileInfo __init__
static int _ctor(PyObject* self, PyObject* args, PyObject* kw);

// ProtoFileInfo __new__
static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems);

// ProtoFileInfo __del__
static void _dtor(PyObject* self) {
  Py_BEGIN_ALLOW_THREADS
  reinterpret_cast<wrapper*>(self)->cpp.Destruct();
  Py_END_ALLOW_THREADS
  Py_TYPE(self)->tp_free(self);
}
static void _del(void* self) {
  delete reinterpret_cast<wrapper*>(self);
}

PyTypeObject wrapper_Type = {
  PyVarObject_HEAD_INIT(&PyType_Type, 0)
  "clif.python.utils.proto_util.ProtoFileInfo", // tp_name
  sizeof(wrapper),                     // tp_basicsize
  0,                                   // tp_itemsize
  _dtor,                               // tp_dealloc
  0,                             // tp_print
  nullptr,                             // tp_getattr
  nullptr,                             // tp_setattr
  nullptr,                             // tp_compare
  nullptr,                             // tp_repr
  &AsNumber,                           // tp_as_number
  nullptr,                             // tp_as_sequence
  nullptr,                             // tp_as_mapping
  nullptr,                             // tp_hash
  nullptr,                             // tp_call
  nullptr,                             // tp_str
  nullptr,                             // tp_getattro
  nullptr,                             // tp_setattro
  nullptr,                             // tp_as_buffer
  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HEAPTYPE | Py_TPFLAGS_BASETYPE, // tp_flags
  "CLIF wrapper for ::clif_proto::ProtoFileInfo", // tp_doc
  nullptr,                             // tp_traverse
  nullptr,                             // tp_clear
  nullptr,                             // tp_richcompare
  0,                                   // tp_weaklistoffset
  nullptr,                             // tp_iter
  nullptr,                             // tp_iternext
  Methods,                             // tp_methods
  nullptr,                             // tp_members
  nullptr,                             // tp_getset
  nullptr,                             // tp_base
  nullptr,                             // tp_dict
  nullptr,                             // tp_descr_get
  nullptr,                             // tp_descr_set
  0,                                   // tp_dictoffset
  _ctor,                               // tp_init
  _new,                                // tp_alloc
  PyType_GenericNew,                   // tp_new
  _del,                                // tp_free
  nullptr,                             // tp_is_gc
  nullptr,                             // tp_bases
  nullptr,                             // tp_mro
  nullptr,                             // tp_cache
  nullptr,                             // tp_subclasses
  nullptr,                             // tp_weaklist
  nullptr,                             // tp_del
  0,                                   // tp_version_tag
};

static int _ctor(PyObject* self, PyObject* args, PyObject* kw) {
  PyObject* init = wrapProtoFileInfo_as___init__(self, args, kw);
  Py_XDECREF(init);
  return init? 0: -1;
}

static PyObject* _new(PyTypeObject* type, Py_ssize_t nitems) {
  assert(nitems == 0);
  PyObject* self = reinterpret_cast<PyObject*>(new wrapper);
  return PyObject_Init(self, &wrapper_Type);
}

static ::clif_proto::ProtoFileInfo* ThisPtr(PyObject* py) {
  if (Py_TYPE(py) == &wrapper_Type) {
    return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
  }
  PyObject* base = PyObject_CallMethod(py, C("as_clif_proto_ProtoFileInfo"), nullptr);
  if (base) {
    if (PyCapsule_CheckExact(base)) {
      void* p = PyCapsule_GetPointer(base, C("::clif_proto::ProtoFileInfo"));
      if (!PyErr_Occurred()) {
        ::clif_proto::ProtoFileInfo* c = static_cast<::clif_proto::ProtoFileInfo*>(p);
        Py_DECREF(base);
        return c;
      }
    }
    Py_DECREF(base);
  }
  if (PyObject_IsInstance(py, reinterpret_cast<PyObject*>(&wrapper_Type))) {
    if (!base) {
      PyErr_Clear();
      return ::clif::python::Get(reinterpret_cast<wrapper*>(py)->cpp);
    }
    PyErr_Format(PyExc_ValueError, "can't convert %s %s to ::clif_proto::ProtoFileInfo*", ClassName(py), ClassType(py));
  } else {
    PyErr_Format(PyExc_TypeError, "expecting %s instance, got %s %s", wrapper_Type.tp_name, ClassName(py), ClassType(py));
  }
  return nullptr;
}
}  // namespace pyProtoFileInfo


// Initialize module

bool Ready() {
  if (PyType_Ready(&pyProtoTypeInfo::wrapper_Type) < 0) return false;
  Py_INCREF(&pyProtoTypeInfo::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyMethodInfo::wrapper_Type) < 0) return false;
  Py_INCREF(&pyMethodInfo::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyServiceInfo::wrapper_Type) < 0) return false;
  Py_INCREF(&pyServiceInfo::wrapper_Type);  // For PyModule_AddObject to steal.
  if (PyType_Ready(&pyProtoFileInfo::wrapper_Type) < 0) return false;
  Py_INCREF(&pyProtoFileInfo::wrapper_Type);  // For PyModule_AddObject to steal.
  return true;
}
static struct PyModuleDef cModPyDem =
{
    PyModuleDef_HEAD_INIT,
    "clif.python.utils.proto_util", /* name of module */
    "CLIF-generated module for clif/python/proto_util.h",          /* module documentation, may be NULL */
    -1,          /* size of per-interpreter state of the module, or -1 if the module keeps state in global variables. */
    // module_methods
};

PyObject* Init() {

PyObject* module = PyModule_Create(&cModPyDem);
if (!module) return nullptr;
  PyEval_InitThreads();
  if (PyModule_AddObject(module, "ProtoTypeInfo", reinterpret_cast<PyObject*>(&pyProtoTypeInfo::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "MethodInfo", reinterpret_cast<PyObject*>(&pyMethodInfo::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "ServiceInfo", reinterpret_cast<PyObject*>(&pyServiceInfo::wrapper_Type)) < 0) goto err;
  if (PyModule_AddObject(module, "ProtoFileInfo", reinterpret_cast<PyObject*>(&pyProtoFileInfo::wrapper_Type)) < 0) goto err;
  return module;
err:
  return nullptr;
}

}  // namespace clif_python_utils_proto__util_clifwrap

namespace clif_proto {
using namespace ::clif;
using ::clif::Clif_PyObjAs;
using ::clif::Clif_PyObjFrom;

// MethodInfo to/from ::clif_proto::MethodInfo conversion

bool Clif_PyObjAs(PyObject* py, ::clif_proto::MethodInfo** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::clif_proto::MethodInfo* cpp = clif_python_utils_proto__util_clifwrap::pyMethodInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::clif_proto::MethodInfo>* c) {
  assert(c != nullptr);
  ::clif_proto::MethodInfo* cpp = clif_python_utils_proto__util_clifwrap::pyMethodInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyMethodInfo::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::clif_proto::MethodInfo>* c) {
  assert(c != nullptr);
  ::clif_proto::MethodInfo* cpp = clif_python_utils_proto__util_clifwrap::pyMethodInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyMethodInfo::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert MethodInfo instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::clif_proto::MethodInfo* c) {
  assert(c != nullptr);
  ::clif_proto::MethodInfo* cpp = clif_python_utils_proto__util_clifwrap::pyMethodInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::clif_proto::MethodInfo>* c) {
  assert(c != nullptr);
  ::clif_proto::MethodInfo* cpp = clif_python_utils_proto__util_clifwrap::pyMethodInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::clif_proto::MethodInfo* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&clif_python_utils_proto__util_clifwrap::pyMethodInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyMethodInfo::wrapper*>(py)->cpp = ::clif::Instance<::clif_proto::MethodInfo>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::clif_proto::MethodInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&clif_python_utils_proto__util_clifwrap::pyMethodInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyMethodInfo::wrapper*>(py)->cpp = ::clif::Instance<::clif_proto::MethodInfo>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::clif_proto::MethodInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&clif_python_utils_proto__util_clifwrap::pyMethodInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyMethodInfo::wrapper*>(py)->cpp = ::clif::Instance<::clif_proto::MethodInfo>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::clif_proto::MethodInfo& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&clif_python_utils_proto__util_clifwrap::pyMethodInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyMethodInfo::wrapper*>(py)->cpp = ::clif::MakeShared<::clif_proto::MethodInfo>(c);
  return py;
}

// ProtoFileInfo to/from ::clif_proto::ProtoFileInfo conversion

bool Clif_PyObjAs(PyObject* py, ::clif_proto::ProtoFileInfo** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::clif_proto::ProtoFileInfo* cpp = clif_python_utils_proto__util_clifwrap::pyProtoFileInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::clif_proto::ProtoFileInfo>* c) {
  assert(c != nullptr);
  ::clif_proto::ProtoFileInfo* cpp = clif_python_utils_proto__util_clifwrap::pyProtoFileInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyProtoFileInfo::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::clif_proto::ProtoFileInfo>* c) {
  assert(c != nullptr);
  ::clif_proto::ProtoFileInfo* cpp = clif_python_utils_proto__util_clifwrap::pyProtoFileInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyProtoFileInfo::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ProtoFileInfo instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

PyObject* Clif_PyObjFrom(::clif_proto::ProtoFileInfo* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&clif_python_utils_proto__util_clifwrap::pyProtoFileInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyProtoFileInfo::wrapper*>(py)->cpp = ::clif::Instance<::clif_proto::ProtoFileInfo>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::clif_proto::ProtoFileInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&clif_python_utils_proto__util_clifwrap::pyProtoFileInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyProtoFileInfo::wrapper*>(py)->cpp = ::clif::Instance<::clif_proto::ProtoFileInfo>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::clif_proto::ProtoFileInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&clif_python_utils_proto__util_clifwrap::pyProtoFileInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyProtoFileInfo::wrapper*>(py)->cpp = ::clif::Instance<::clif_proto::ProtoFileInfo>(std::move(c));
  return py;
}

// ProtoTypeInfo to/from ::clif_proto::ProtoTypeInfo conversion

bool Clif_PyObjAs(PyObject* py, ::clif_proto::ProtoTypeInfo** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::clif_proto::ProtoTypeInfo* cpp = clif_python_utils_proto__util_clifwrap::pyProtoTypeInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::clif_proto::ProtoTypeInfo>* c) {
  assert(c != nullptr);
  ::clif_proto::ProtoTypeInfo* cpp = clif_python_utils_proto__util_clifwrap::pyProtoTypeInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyProtoTypeInfo::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::clif_proto::ProtoTypeInfo>* c) {
  assert(c != nullptr);
  ::clif_proto::ProtoTypeInfo* cpp = clif_python_utils_proto__util_clifwrap::pyProtoTypeInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyProtoTypeInfo::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ProtoTypeInfo instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::clif_proto::ProtoTypeInfo* c) {
  assert(c != nullptr);
  ::clif_proto::ProtoTypeInfo* cpp = clif_python_utils_proto__util_clifwrap::pyProtoTypeInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::clif_proto::ProtoTypeInfo>* c) {
  assert(c != nullptr);
  ::clif_proto::ProtoTypeInfo* cpp = clif_python_utils_proto__util_clifwrap::pyProtoTypeInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::clif_proto::ProtoTypeInfo* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&clif_python_utils_proto__util_clifwrap::pyProtoTypeInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyProtoTypeInfo::wrapper*>(py)->cpp = ::clif::Instance<::clif_proto::ProtoTypeInfo>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::clif_proto::ProtoTypeInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&clif_python_utils_proto__util_clifwrap::pyProtoTypeInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyProtoTypeInfo::wrapper*>(py)->cpp = ::clif::Instance<::clif_proto::ProtoTypeInfo>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::clif_proto::ProtoTypeInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&clif_python_utils_proto__util_clifwrap::pyProtoTypeInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyProtoTypeInfo::wrapper*>(py)->cpp = ::clif::Instance<::clif_proto::ProtoTypeInfo>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::clif_proto::ProtoTypeInfo& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&clif_python_utils_proto__util_clifwrap::pyProtoTypeInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyProtoTypeInfo::wrapper*>(py)->cpp = ::clif::MakeShared<::clif_proto::ProtoTypeInfo>(c);
  return py;
}

// ServiceInfo to/from ::clif_proto::ServiceInfo conversion

bool Clif_PyObjAs(PyObject* py, ::clif_proto::ServiceInfo** c) {
  assert(c != nullptr);
  if (Py_None == py) {
    *c = nullptr;
    return true;
  }
  ::clif_proto::ServiceInfo* cpp = clif_python_utils_proto__util_clifwrap::pyServiceInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::shared_ptr<::clif_proto::ServiceInfo>* c) {
  assert(c != nullptr);
  ::clif_proto::ServiceInfo* cpp = clif_python_utils_proto__util_clifwrap::pyServiceInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = ::clif::MakeStdShared(reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyServiceInfo::wrapper*>(py)->cpp, cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, std::unique_ptr<::clif_proto::ServiceInfo>* c) {
  assert(c != nullptr);
  ::clif_proto::ServiceInfo* cpp = clif_python_utils_proto__util_clifwrap::pyServiceInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  if (!reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyServiceInfo::wrapper*>(py)->cpp.Detach()) {
    PyErr_SetString(PyExc_ValueError, "Cannot convert ServiceInfo instance to std::unique_ptr.");
    return false;
  }
  c->reset(cpp);
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::clif_proto::ServiceInfo* c) {
  assert(c != nullptr);
  ::clif_proto::ServiceInfo* cpp = clif_python_utils_proto__util_clifwrap::pyServiceInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

bool Clif_PyObjAs(PyObject* py, ::gtl::optional<::clif_proto::ServiceInfo>* c) {
  assert(c != nullptr);
  ::clif_proto::ServiceInfo* cpp = clif_python_utils_proto__util_clifwrap::pyServiceInfo::ThisPtr(py);
  if (cpp == nullptr) return false;
  *c = *cpp;
  return true;
}

PyObject* Clif_PyObjFrom(::clif_proto::ServiceInfo* c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&clif_python_utils_proto__util_clifwrap::pyServiceInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyServiceInfo::wrapper*>(py)->cpp = ::clif::Instance<::clif_proto::ServiceInfo>(c, ::clif::UnOwnedResource());
  return py;
}

PyObject* Clif_PyObjFrom(std::shared_ptr<::clif_proto::ServiceInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&clif_python_utils_proto__util_clifwrap::pyServiceInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyServiceInfo::wrapper*>(py)->cpp = ::clif::Instance<::clif_proto::ServiceInfo>(c);
  return py;
}

PyObject* Clif_PyObjFrom(std::unique_ptr<::clif_proto::ServiceInfo> c, py::PostConv unused) {
  if (c == nullptr) Py_RETURN_NONE;
  PyObject* py = PyType_GenericNew(&clif_python_utils_proto__util_clifwrap::pyServiceInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyServiceInfo::wrapper*>(py)->cpp = ::clif::Instance<::clif_proto::ServiceInfo>(std::move(c));
  return py;
}

PyObject* Clif_PyObjFrom(const ::clif_proto::ServiceInfo& c, py::PostConv unused) {
  PyObject* py = PyType_GenericNew(&clif_python_utils_proto__util_clifwrap::pyServiceInfo::wrapper_Type, NULL, NULL);
  reinterpret_cast<clif_python_utils_proto__util_clifwrap::pyServiceInfo::wrapper*>(py)->cpp = ::clif::MakeShared<::clif_proto::ServiceInfo>(c);
  return py;
}

}  // namespace clif_proto
